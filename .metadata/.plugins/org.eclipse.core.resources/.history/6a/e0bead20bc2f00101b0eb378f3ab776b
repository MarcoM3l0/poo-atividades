package br.ifs.tdd.service;

import java.time.LocalDate;
import java.util.*;

import br.ifs.tdd.exception.EstoqueInsuficienteException;
import br.ifs.tdd.exception.OperacaoInvalidaException;
import br.ifs.tdd.exception.ProdutoDuplicadoException;
import br.ifs.tdd.exception.ProdutoNaoEncontradoException;
import br.ifs.tdd.exception.ValidacaoException;
import br.ifs.tdd.model.*;

public class Estoque {
	private Map<String, Produto> produtos = new HashMap<>();
    private Map<String, List<Lote>> lotes = new HashMap<>();

    public void cadastrar(Produto produto) {
    	
        if (produto == null) throw new ValidacaoException("Produto inválido");
        
        String id = produto.getId();
        if (produtos.containsKey(id)) throw new ProdutoDuplicadoException("Produto com cadastro");
        
        produtos.put(id, produto);
        lotes.put(id, new ArrayList<>());
    }

    public void remover(String idProduto) {
    	
        if (idProduto == null || idProduto.trim().isEmpty()) throw new ValidacaoException("Identificador de produto inválido");
        if (!produtos.containsKey(idProduto)) throw new ProdutoNaoEncontradoException("Produto não cadastrado");
        
        List<Lote> lista = lotes.get(idProduto);
        if (!lista.isEmpty()) throw new OperacaoInvalidaException("Remova os lotes associados primeiro");
        
        produtos.remove(idProduto);
        lotes.remove(idProduto);
    }
    
    public Produto buscar(String idProduto) {
    	
    	if (idProduto == null || idProduto.trim().isEmpty()) throw new ValidacaoException("Identificador de produto inválido");
        
    	Produto p = produtos.get(idProduto);
        if(p == null) throw new ProdutoNaoEncontradoException("Produto não cadastrado");
        
        return p;
    	
    }
    
    public void atualizar(Produto produto) {
    	
    	if(produto == null) throw new ValidacaoException("Produto inválido");
    	
    	String id = produto.getId();
    	if(produtos.containsKey(id)) throw new ProdutoNaoEncontradoException("Produto não cadastrado");
    	
    	produtos.put(id, produto);
    	
    }
    
    public void adicionar(String idProduto, int quantidade, LocalDate dataValidade) {
    	
    	if(idProduto == null || idProduto.trim().isEmpty()) throw new ValidacaoException("Identificador de produto inválido");
    	if (!produtos.containsKey(idProduto)) throw new ProdutoNaoEncontradoException("Produto não cadastrado");
    	
    	Lote lote = new Lote(produtos.get(idProduto), quantidade, dataValidade);
    	lotes.get(idProduto).add(lote);
    	
    }
    
    public void retirar(String idProduto, int quantidade) {
    	
    	if(idProduto == null || idProduto.trim().isEmpty()) throw new ValidacaoException("Identificador de produto inválido");
    	if (!produtos.containsKey(idProduto)) throw new ProdutoNaoEncontradoException("Produto não cadastrado");
    	if (quantidade <= 0) throw new ValidacaoException("Quantidade inválida");
    	
    	List<Lote> lista = lotes.get(idProduto);
    	int total = lista.stream().mapToInt(Lote::getQuantidade).sum();
    	if(quantidade > total) throw new EstoqueInsuficienteException("Estoque insuficiente");
    	
    	lista.sort(Comparator.comparing(Lote::getDataValidade));
    	int restante = quantidade;
    	Iterator<Lote> it = lista.iterator();
    	
    	while(it.hasNext() && restante > 0) {
    		
    		Lote lote = it.next();
    		int qnt = lote.getQuantidade();
    		
    		if(qnt >= restante) {
    			restante -= qnt;
    			lote = new Lote(lote.getProduto(), 0, lote.getDataValidade());
    		}else {
    			lote = new Lote(lote.getProduto(), qnt - restante, lote.getDataValidade());
    			restante = 0;
    		}
    		
    		it.remove();
    		if(lote.getQuantidade() > 0) lista.add(lote);
    	}
    	
    	lotes.put(idProduto, lista);
    }
    
    public int obterQuantidade() {
    	return lotes.values().stream().flatMap(List::stream).mapToInt(Lote::getQuantidade).sum();
    }
    
    public int obterQuantidade(String idProduto) {
    	
    	if(idProduto == null || idProduto.trim().isEmpty()) throw new ValidacaoException("Identificador de produto inválido");
    	if (!produtos.containsKey(idProduto)) throw new ProdutoNaoEncontradoException("Produto não cadastrado");
    	
    	return lotes.get(idProduto).stream().mapToInt(Lote::getQuantidade).sum();
    }
    
    

}
